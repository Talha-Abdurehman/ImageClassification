# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19bBxwx029VGbQyWDhKRQTp8n6KcGE9SG
"""

# Dependencies
from torch.optim import Adam
import torch.utils.data
from torchvision import datasets
import numpy as np
from torch import nn
from torch.utils.data import DataLoader
from torchvision.transforms import ToTensor
import torch
import torchvision
import matplotlib.pyplot as plt
from PIL import Image
import os

# Downloading Datasets for training
train = datasets.MNIST(download=True, train=True, root='Data', transform=ToTensor())
dataset = DataLoader(train, batch_size=32, )

# Neural Network - Convolutional , using Sequential API
class ImageClassifier(nn.Module):
    def __init__(self):
        super().__init__()
        self.model = nn.Sequential(
            nn.Conv2d(1, 32, (3,3)),
            nn.ReLU(),
            nn.Conv2d(32, 64, (3,3)),
            nn.ReLU(),
            nn.Conv2d(64,64, (3,3)),
            nn.ReLU(),
            nn.Flatten(),
            nn.Linear(64*(28-6)*(28-6), 10)
        )

    def forward(self, x):
        return self.model(x)

# Running our model on the Nvidia GPU so converting device to CUDA
clf = ImageClassifier().to('cuda')

# Loss or Cost function is CrossEntropyLoss - This also applies
# The softmax function to convert our weighted sum into a probability distro
loss_fn = nn.CrossEntropyLoss()

# Optimization algorithm and Model is Adam which will perform accelerated
# Gradient descent
optimizer = Adam(clf.parameters(), lr=0.001)


if __name__ == "__main__":


    with open('model_state.pt', 'rb') as f:
      clf.load_state_dict(torch.load(f))

image_number = 1

while os.path.isfile(f"./digits/img_{image_number}.jpg"):
  try:
    img = Image.open(f"./digits/img_{image_number}.jpg")
    img_tensor = ToTensor()(img).unsqueeze(0).to('cuda')
    title = torch.argmax(clf(img_tensor))
    plt.imshow(img)
    plt.title(title)
    plt.show()



  except:
    print("Error")
  finally:
    image_number += 1





    # img = Image.open("img_7.jpg")
    # img_tensor = ToTensor()(img).unsqueeze(0).to('cuda')
    # print(torch.argmax(clf(img_tensor)))


    # for epoch in range(5):
    #     for batch in dataset:

    #         X, y = batch
    #         X, y = X.to('cuda'), y.to('cuda')
    #         yhat = clf(X)
    #         loss = loss_fn(yhat, y)

    #         # Gradient

    #         optimizer.zero_grad()
    #         loss.backward()
    #         optimizer.step()
    #         print(f"Epoch : {epoch}, Loss : {loss.item()}")


    # with open('model_state.pt', 'wb') as f:
    #     torch.save(clf.state_dict(), f)

